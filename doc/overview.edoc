%% -*- Doc -*-
%% vim: set syntax=asciidoc:
@author Joseph Wayne Norton <norton@alum.mit.edu>
@copyright 2011-2013 by Joseph Wayne Norton
@title Universal Binary Format and ABNF
@doc
This is UBF-ABNF, a framework for integrating UBF and ABNF.  This
repository depends on the UBF and ABNFC open source repositories.

_This repository is experimental in nature and not intended for
production usage._

== Quick Start Recipe

To download, build, and test the ubf_abnf application in one shot,
please follow this recipe:

------
$ mkdir working-directory-name
$ cd working-directory-name
$ git clone https://github.com/ubf/ubf-abnf.git ubf_abnf
$ cd ubf_abnf
$ make deps clean compile test
------

For an alternative recipe with other "features" albeit more complex,
please read further.

== Documentation

=== Where should I start?

This README is a good first step.

The UBF User\'s Guide is the best next step.  Check out
http://ubf.github.com/ubf/ubf-user-guide.en.html for further
detailed information.

ABNF samples and eunit tests can be found in the test/eunit directory.
directory.

=== What is UBF?

UBF is the "Universal Binary Format", designed and implemented by Joe
Armstrong.  UBF is a language for transporting and describing complex
data structures across a network.  It has three components:

- UBF(a) is a "language neutral" data transport format, roughly
  equivalent to well-formed XML.
- UBF(b) is a programming language for describing types in UBF(a) and
  protocols between clients and servers.  This layer is typically
  called the "protocol contract".  UBF(b) is roughly equivalent to
  Verified XML, XML-schemas, SOAP and WDSL.
- UBF(c) is a meta-level protocol used between a UBF client and a UBF
  server.

See http://ubf.github.com/ubf for further details.

=== What is ABNF?

Augmented Backus-Naur Form (ABNF) is a metalanguage based on
Backus-Naur Form (BNF), but consisting of its own syntax and
derivation rules.

- The motive principle for ABNF is to describe a formal system of a
  language to be used as a bidirectional communications protocol.

- It is defined by Internet Standard 68 (STD 68), which as of May 2008
  is RFC 5234, and it often serves as the definition language for IETF
  communication protocols.

== To download

1. Configure your e-mail and name for Git
+
------
$ git config \--global user.email "you@example.com"
$ git config \--global user.name "Your Name"
------

2. Install Repo
+
------
$ mkdir -p ~/bin
$ wget -O - https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo
$ chmod a+x ~/bin/repo
------

3. Create working directory
+
------
$ mkdir working-directory-name
$ cd working-directory-name
$ repo init -u https://github.com/ubf/manifests.git -m ubf-abnf-default.xml
------
+
NOTE: Your "Git" identity is needed during the init step.  Please
enter the name and email of your GitHub account if you have one.  Team
members having read-write access are recommended to use "repo init -u
git@github.com:ubf/manifests.git -m ubf-abnf-default-rw.xml".
+
TIP: If you want to checkout the latest development version, please
append " -b dev" to the repo init command.

4. Download Git repositories
+
------
$ cd working-directory-name
$ repo sync
------

For further information and help for related tools, please refer to the
following links:

- Erlang - http://www.erlang.org/
  * *R15B01 or newer, R16B03-1 has been tested most recently*
- Git - http://git-scm.com/
  * *Git 1.5.4 or newer, Git 1.8.2 has been tested most recently*
  * _required for Repo and GitHub_
- GitHub - https://github.com
- Python - http://www.python.org
  * *Python 2.4 or newer, Python 2.7.3 has been tested most recently
    (CAUTION: Python 3.x might be too new)*
* _required for Repo_
  - Rebar - https://github.com/rebar/rebar/wiki
  - Repo - http://source.android.com/source/git-repo.html

== To build - basic recipe

1. Get and install an erlang system http://www.erlang.org

2. Build
+
------
$ cd working-directory-name
$ make compile
------

3. Run the unit tests
+
------
$ cd working-directory-name
$ make eunit
------

== To build - optional features

A. Dialyzer Testing _basic recipe_
   1. Build Dialyzer\'s PLT _(required once)_
+
------
$ cd working-directory-name
$ make build-plt
------
+
TIP: Check Makefile and dialyzer\'s documentation for further
information.

   2. Dialyze with specs
+
------
$ cd working-directory-name
$ make dialyze
------
+
CAUTION: If you manually run dialyzer with the "-r" option, execute
"make clean compile" first to avoid finding duplicate beam files
underneath rebar\'s .eunit directory.  Check Makefile for further
information.

   3. Dialyze without specs
+
------
$ cd working-directory-name
$ make dialyze-nospec
------

== Credits

Many, many thanks to Joe Armstrong, UBF\'s designer and original
implementer.

Thanks to Anders Nygren, ABNFC\'s designer and implementor.  ABNFC is
a parser generator for Erlang.  UBF-ABNF relies on the ABNFC
application for parsing ABNF into a symbolic form.

Gemini Mobile Technologies, Inc. has approved the release of this
repository under an MIT license.
@end
